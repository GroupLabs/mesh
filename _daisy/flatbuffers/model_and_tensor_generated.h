// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MODELANDTENSOR_MYSERVICE_H_
#define FLATBUFFERS_GENERATED_MODELANDTENSOR_MYSERVICE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace myservice {

struct FileChunk;
struct FileChunkBuilder;

struct TensorChunk;
struct TensorChunkBuilder;

struct InputData;
struct InputDataBuilder;

struct ReceiveModelAndTensorResponse;
struct ReceiveModelAndTensorResponseBuilder;

/// A simple chunk of raw file data (e.g., part of a `.pt` model file).
struct FileChunk FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FileChunkBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct FileChunkBuilder {
  typedef FileChunk Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(FileChunk::VT_DATA, data);
  }
  explicit FileChunkBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FileChunk> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FileChunk>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FileChunk> CreateFileChunk(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  FileChunkBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FileChunk> CreateFileChunkDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return myservice::CreateFileChunk(
      _fbb,
      data__);
}

/// A chunk of tensor data. For example, this could represent input data
/// for a machine learning model.
struct TensorChunk FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TensorChunkBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::Vector<float> *data() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct TensorChunkBuilder {
  typedef TensorChunk Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<float>> data) {
    fbb_.AddOffset(TensorChunk::VT_DATA, data);
  }
  explicit TensorChunkBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TensorChunk> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TensorChunk>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TensorChunk> CreateTensorChunk(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> data = 0) {
  TensorChunkBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TensorChunk> CreateTensorChunkDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<float>(*data) : 0;
  return myservice::CreateTensorChunk(
      _fbb,
      data__);
}

/// InputData contains either a file chunk, a tensor chunk, or both.
/// Fields that aren't present default to null, making them optional.
struct InputData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InputDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILE = 4,
    VT_TENSOR = 6
  };
  const myservice::FileChunk *file() const {
    return GetPointer<const myservice::FileChunk *>(VT_FILE);
  }
  const myservice::TensorChunk *tensor() const {
    return GetPointer<const myservice::TensorChunk *>(VT_TENSOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILE) &&
           verifier.VerifyTable(file()) &&
           VerifyOffset(verifier, VT_TENSOR) &&
           verifier.VerifyTable(tensor()) &&
           verifier.EndTable();
  }
};

struct InputDataBuilder {
  typedef InputData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_file(::flatbuffers::Offset<myservice::FileChunk> file) {
    fbb_.AddOffset(InputData::VT_FILE, file);
  }
  void add_tensor(::flatbuffers::Offset<myservice::TensorChunk> tensor) {
    fbb_.AddOffset(InputData::VT_TENSOR, tensor);
  }
  explicit InputDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InputData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InputData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InputData> CreateInputData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<myservice::FileChunk> file = 0,
    ::flatbuffers::Offset<myservice::TensorChunk> tensor = 0) {
  InputDataBuilder builder_(_fbb);
  builder_.add_tensor(tensor);
  builder_.add_file(file);
  return builder_.Finish();
}

/// Response message indicating the status after receiving and processing
/// the streamed input data. You can add more fields if needed, for example:
/// - processed byte count
/// - validation errors
/// - model loading status
struct ReceiveModelAndTensorResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReceiveModelAndTensorResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4
  };
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           verifier.EndTable();
  }
};

struct ReceiveModelAndTensorResponseBuilder {
  typedef ReceiveModelAndTensorResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(ReceiveModelAndTensorResponse::VT_STATUS, status);
  }
  explicit ReceiveModelAndTensorResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ReceiveModelAndTensorResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReceiveModelAndTensorResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ReceiveModelAndTensorResponse> CreateReceiveModelAndTensorResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0) {
  ReceiveModelAndTensorResponseBuilder builder_(_fbb);
  builder_.add_status(status);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ReceiveModelAndTensorResponse> CreateReceiveModelAndTensorResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *status = nullptr) {
  auto status__ = status ? _fbb.CreateString(status) : 0;
  return myservice::CreateReceiveModelAndTensorResponse(
      _fbb,
      status__);
}

}  // namespace myservice

#endif  // FLATBUFFERS_GENERATED_MODELANDTENSOR_MYSERVICE_H_
