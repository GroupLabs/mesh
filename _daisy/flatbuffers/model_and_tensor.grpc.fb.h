// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: model_and_tensor
#ifndef GRPC_model_5fand_5ftensor__INCLUDED
#define GRPC_model_5fand_5ftensor__INCLUDED

#include "model_and_tensor_generated.h"
#include "flatbuffers/grpc.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace myservice {

class ModelService final {
 public:
  static constexpr char const* service_full_name() {
    return "myservice.ModelService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< flatbuffers::grpc::Message<InputData>>> ReceiveModelAndTensor(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< flatbuffers::grpc::Message<InputData>>>(ReceiveModelAndTensorRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<InputData>>> AsyncReceiveModelAndTensor(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<InputData>>>(AsyncReceiveModelAndTensorRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<InputData>>> PrepareAsyncReceiveModelAndTensor(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<InputData>>>(PrepareAsyncReceiveModelAndTensorRaw(context, response, cq));
    }
  private:
    virtual ::grpc::ClientWriterInterface< flatbuffers::grpc::Message<InputData>>* ReceiveModelAndTensorRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<InputData>>* AsyncReceiveModelAndTensorRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<InputData>>* PrepareAsyncReceiveModelAndTensorRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< flatbuffers::grpc::Message<InputData>>> ReceiveModelAndTensor(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response) {
      return std::unique_ptr< ::grpc::ClientWriter< flatbuffers::grpc::Message<InputData>>>(ReceiveModelAndTensorRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<InputData>>> AsyncReceiveModelAndTensor(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<InputData>>>(AsyncReceiveModelAndTensorRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<InputData>>> PrepareAsyncReceiveModelAndTensor(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<InputData>>>(PrepareAsyncReceiveModelAndTensorRaw(context, response, cq));
    }
  
   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientWriter< flatbuffers::grpc::Message<InputData>>* ReceiveModelAndTensorRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response) override;
    ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<InputData>>* AsyncReceiveModelAndTensorRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<InputData>>* PrepareAsyncReceiveModelAndTensorRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveModelAndTensor_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
  
  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ReceiveModelAndTensor(::grpc::ServerContext* context, ::grpc::ServerReader< flatbuffers::grpc::Message<InputData>>* reader, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveModelAndTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service */*service*/) {}
   public:
    WithAsyncMethod_ReceiveModelAndTensor() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReceiveModelAndTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveModelAndTensor(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< flatbuffers::grpc::Message<InputData>>* /*reader*/, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* /*response*/) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveModelAndTensor(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>, flatbuffers::grpc::Message<InputData>>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef   WithAsyncMethod_ReceiveModelAndTensor<  Service   >   AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ReceiveModelAndTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service */*service*/) {}
   public:
    WithGenericMethod_ReceiveModelAndTensor() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReceiveModelAndTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveModelAndTensor(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< flatbuffers::grpc::Message<InputData>>* /*reader*/, flatbuffers::grpc::Message<ReceiveModelAndTensorResponse>* /*response*/) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef   Service   StreamedUnaryService;
  typedef   Service   SplitStreamedService;
  typedef   Service   StreamedService;
};

}  // namespace myservice


#endif  // GRPC_model_5fand_5ftensor__INCLUDED
